name: Build Go cmd

on:
  workflow_call:
    inputs:
      cmd-path:
        required: true
        type: string
      go-build-cache-restore-or-update:
        required: false
        type: string
        default: 'restore'
      go-mod-path:
        required: false
        type: string
        default: 'go.mod'
      go-mod-cache-restore-or-update:
        required: false
        type: string
        default: 'restore'
      goarch:
        required: false
        type: string
        default: ''   # default is to take it from ${{ runner.arch }}
      goos:
        required: false
        type: string
        default: ''   # default is to take it from ${{ runner.os }}
      pack-to-docker-image:
        required: false
        type: boolean
        default: false
      base-sha:
        required: false
        type: string
        default: 'anysha'


jobs:
  build:
    name: "${{ inputs.goos }}/${{ inputs.goarch }}"
    runs-on: [ self-hosted, small ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        id: setup-go
        with:
          cache: false
          go-version-file: ${{ inputs.go-mod-path }}
      - id: go-cache-paths
        name: Set Cache Paths
        run: |
          echo "go-build=$(go env GOCACHE)" >> $GITHUB_OUTPUT
          echo "go-mod-cache=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT
      - name: Set GOARCH and GOOS
        id: goarch-goos
        run: |
          GOARCH_INPUT="${{ inputs.goarch }}"
          GOOS_INPUT="${{ inputs.goos }}"
          declare -A runner_to_go_os=( ["Linux"]="linux" ["Windows"]="windows" ["macOS"]="darwin" )
          declare -A runner_to_go_arch=( ["X86"]="386" ["X64"]="amd64" ["ARM"]="arm" ["ARM64"]="arm64" )
          ARCH_FROM_RUNNER="${runner_to_go_arch[${{ runner.arch }}]}"
          OS_FROM_RUNNER="${runner_to_go_os[${{ runner.os }}]}"
          echo "goarch=${GOARCH_INPUT:-$ARCH_FROM_RUNNER}" >> "$GITHUB_OUTPUT"
          echo "goos=${GOOS_INPUT:-$OS_FROM_RUNNER}" >> "$GITHUB_OUTPUT"
      - id: set-cache-keys
        run: |
          OS="${{ steps.goarch-goos.outputs.goos }}"
          ARCH="${{ steps.goarch-goos.outputs.goarch }}"
          GO_VER="${{ steps.setup-go.outputs.go-version }}"
          GO_SUM_HASH="${{ hashFiles('**/go.sum') }}"
          GH_REPO="${{ github.event.repository.owner }}_${{ github.event.repository.name }}"
          GIT_SHA="${{ inputs.base-sha }}"
          CMD_PATH="${{ inputs.cmd-path }}"
          CMD_PATH="${CMD_PATH//\//_}"  # '//\//_' wat? here how it works: ${var//pattern/replace}, and pattern is '/', so escape it: '\/'. and replace is just '_', easy.

          echo "go-mod-cache-key=go-mod-cache-${OS}-${ARCH}-go-${GO_VER}-${GO_SUM_HASH}" >> "$GITHUB_OUTPUT"
          for run_target in cmd test; do
            echo "go-build-cache-key-${run_target}=go-build-cache-${OS}-${ARCH}-go-${GO_VER}-gh-${GH_REPO}-git-${GIT_SHA}-${run_target}-${CMD_PATH}" >> "$GITHUB_OUTPUT"
          done
      - name: Go Mod Cache
        uses: tespkg/actions-cache@v1
        if: ${{ inputs.go-mod-cache-restore-or-update == 'update' }}
        with:
          endpoint: ${{ vars.HETZNER_CACHE_REGION }}.${{ vars.HETZNER_CACHE_ENDPOINT }}
          bucket: ${{ vars.HETZNER_CACHE_BUCKET }}
          accessKey: ${{ secrets.HETZNER_CACHE_ACCESS_KEY }}
          secretKey: ${{ secrets.HETZNER_CACHE_SECRET_KEY }}
          use-fallback: false
          path: |
            ${{ steps.go-cache-paths.outputs.go-mod-cache }}
          key: ${{ steps.set-cache-keys.outputs.go-mod-cache-key }}
      - name: Go Mod Cache Restore
        uses: tespkg/actions-cache/restore@v1
        if: ${{ inputs.go-mod-cache-restore-or-update == 'restore' }}
        with:
          endpoint: ${{ vars.HETZNER_CACHE_REGION }}.${{ vars.HETZNER_CACHE_ENDPOINT }}
          bucket: ${{ vars.HETZNER_CACHE_BUCKET }}
          accessKey: ${{ secrets.HETZNER_CACHE_ACCESS_KEY }}
          secretKey: ${{ secrets.HETZNER_CACHE_SECRET_KEY }}
          use-fallback: false
          path: |
            ${{ steps.go-cache-paths.outputs.go-mod-cache }}
          key: ${{ steps.set-cache-keys.outputs.go-mod-cache-key }}
      - name: Go Build Cache
        uses: tespkg/actions-cache@v1
        if: ${{ inputs.go-build-cache-restore-or-update == 'update' }}
        with:
          endpoint: ${{ vars.HETZNER_CACHE_REGION }}.${{ vars.HETZNER_CACHE_ENDPOINT }}
          bucket: ${{ vars.HETZNER_CACHE_BUCKET }}
          accessKey: ${{ secrets.HETZNER_CACHE_ACCESS_KEY }}
          secretKey: ${{ secrets.HETZNER_CACHE_SECRET_KEY }}
          use-fallback: false
          path: |
            ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ steps.set-cache-keys.outputs.go-build-cache-key-cmd }}
      - name: Go Build Cache Restore
        uses: tespkg/actions-cache/restore@v1
        if: ${{ inputs.go-build-cache-restore-or-update == 'restore' }}
        with:
          endpoint: ${{ vars.HETZNER_CACHE_REGION }}.${{ vars.HETZNER_CACHE_ENDPOINT }}
          bucket: ${{ vars.HETZNER_CACHE_BUCKET }}
          accessKey: ${{ secrets.HETZNER_CACHE_ACCESS_KEY }}
          secretKey: ${{ secrets.HETZNER_CACHE_SECRET_KEY }}
          use-fallback: false
          path: |
            ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ steps.set-cache-keys.outputs.go-build-cache-key-cmd }}
      - name: Go Build
        run: GOARCH=${{ steps.goarch-goos.outputs.goarch }} GOOS=${{ steps.goarch-goos.outputs.goos }} go build -v ${{ inputs.cmd-path }}
      - name: Pack as Docker image
        if: ${{ inputs.pack-to-docker-image }}
        run: |
          ls -laht
          echo "Packing to the Docker image..."
